name: DSOPBuilder Test

on: [workflow_dispatch, push]

jobs:
  
  build-container:
    name: Build the DSOPBuilder Container Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and export container
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: dsopbuilder:ci-${{ github.run_number }}
          push: false
          outputs: type=docker,dest=/tmp/dsopbuilder-ci.tar
      - name: Upload container
        uses: actions/upload-artifact@v3
        with:
          name: dsopbuilder
          path: /tmp/dsopbuilder-ci.tar

  deploy-k8s:
    name: Deploy Kubernetes
    runs-on: ubuntu-latest
    needs: build-container
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        flavor: [rke2,aks]
        cloud:  [AzureUSGovernmentCloud, AzurePublicCloud]
        location: [usgovvirginia, eastus2]
        vm_size: [Standard_D8_v3]
        cluster_size: [1]
        experimental: [true]
        include:
          - flavor: aks
            version: 1.22.6
        exclude:
          - cloud: AzureUSGovernmentCloud
            location: eastus
          - cloud: AzureUSGovernmentCloud
            location: eastus2
          - cloud: AzurePublicCloud
            location: usgovvirginia
          - cloud: AzurePublicCloud
            location: usgovarizona

    steps:      
      - uses: actions/checkout@v3
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
      - name: Download container
        uses: actions/download-artifact@v3
        with:
          name: dsopbuilder
          path: /tmp
      - name: Load container
        run: docker load --input /tmp/dsopbuilder-ci.tar

      - name: Prep container env directory
        run: |
          mkdir -p env-tmp
          touch env-tmp/vars.env

      - name: Set credentials to Commercial
        if: matrix.cloud == 'AzurePublicCloud'
        run: |
          echo "AZURE_CREDENTIALS="$(echo '${{ secrets.AZURE_PUB_CREDENTIALS }}') >> $GITHUB_ENV
          echo "AKS_AAD_GROUP_ID=${{ secrets.AKS_AAD_GROUP_ID_PUB }}" >> $GITHUB_ENV

      - name: Set credentials to Government
        if: matrix.cloud == 'AzureUSGovernmentCloud'
        run: |         
          echo "AZURE_CREDENTIALS="$(echo '${{ secrets.AZURE_GOV_CREDENTIALS }}') >> $GITHUB_ENV
          echo "AKS_AAD_GROUP_ID=${{ secrets.AKS_AAD_GROUP_ID_GOV }}" >> $GITHUB_ENV
          echo "ARM_ENVIRONMENT=usgovernment" >> env-tmp/vars.env

      - name: Set credential environment vars for container
        run: |
          echo "ARM_TENANT_ID="$(echo '${{ env.AZURE_CREDENTIALS }}' | jq .tenantId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_CLIENT_ID="$(echo '${{ env.AZURE_CREDENTIALS }}' | jq .clientId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_CLIENT_SECRET="$(echo '${{ env.AZURE_CREDENTIALS }}' | jq .clientSecret | tr -d '"') >> env-tmp/vars.env
          echo "ARM_SUBSCRIPTION_ID="$(echo '${{ env.AZURE_CREDENTIALS }}' | jq .subscriptionId | tr -d '"') >> env-tmp/vars.env

          echo "AAD_SERVICE_PRINCIPAL_CLIENT_ID="$(echo '${{ env.AZURE_CREDENTIALS }}' | jq .clientId | tr -d '"') >> env-tmp/vars.env
          echo "AAD_SERVICE_PRINCIPAL_CLIENT_SECRET="$(echo '${{ env.AZURE_CREDENTIALS }}' | jq .clientSecret | tr -d '"') >> env-tmp/vars.env

      - name: Setup cluster config
        run: |
          echo copy ci-config-{flavor}}.json to env-tmp/config.json, set all values, AND set the AAD_GROUP var if aks

          ls -lah

          cp .github/ci-config/ci-config-${{ matrix.flavor }}.json env-tmp/config.json

          rand=$( echo $(( $RANDOM % 100 )) )

          sed -i env-tmp/config.json -e "s/__K8_CLUSTER_NAME__/ci-dsop-${{ matrix.flavor }}-${{ github.run_number }}$rand/g"
          sed -i env-tmp/config.json -e "s/__K8_CLOUD__/${{ matrix.cloud }}/g"
          sed -i env-tmp/config.json -e "s/__K8_LOCATION__/${{ matrix.location }}/g"
          sed -i env-tmp/config.json -e "s/__K8_AGENT_COUNT__/${{ matrix.cluster_size }}/g"
          sed -i env-tmp/config.json -e "s/__K8_VM_SIZE__/${{ matrix.vm_size }}/g"

      - name: Setup AKS config additions
        if: matrix.flavor == 'aks'
        run: |
          sed -i env-tmp/config.json -e "s/__AKS_AAD_GROUP_ID__/${{ env.AKS_AAD_GROUP_ID }}/g"
          sed -i env-tmp/config.json -e "s/__K8_VERSION__/${{ matrix.version }}/g"

      - name: Deploy Kubernetes
        uses: kohlerdominik/docker-run-action@v1
        id: deploy_k8s
        with:
          image: dsopbuilder:ci-${{ github.run_number }}
          shell: /bin/bash
          volumes: |
            ${{ github.workspace }}/env-tmp:/env
          run: |
            set -o allexport
            source /env/vars.env
            set +o allexport

            mv /env/config.json config/config-${{ matrix.flavor }}.json

            # Install AMD64 terraform to make GH Action Runner happy
            wget -q https://releases.hashicorp.com/terraform/1.1.7/terraform_1.1.7_linux_amd64.zip
            unzip terraform*.zip
            mv terraform /usr/local/bin

            if [ ${{ matrix.cloud }} = "AzureUSGovernmentCloud" ]; then
              az cloud set --name AzureUSGovernment
            fi

            az login --service-principal -u "${ARM_CLIENT_ID}" -p "${ARM_CLIENT_SECRET}" --tenant "${ARM_TENANT_ID}"

            python3 main.py ${{ matrix.flavor }} apply --project ${{ github.run_number }} < <(yes)
            
            cd /PyBuilder/working/dsop_${{ matrix.flavor }}/${{ github.run_number }}
            
            #source ../scripts/fetch-kubeconfig.sh

            if [ ${{ matrix.flavor }} = "rke2" ]; then
              echo KVNAME=$(terraform output -raw kv_name) >> /env/cluster.env
              echo CLUSTERNAME=$(terraform output -json rke2_cluster | jq .name | tr -d '"') >> /env/cluster.env
              echo RGNAME=$(terraform output -raw rg_name) >> /env/cluster.env
            else
              #az aks get-credentials -g $(terraform output -raw rg_name) -n $(terraform output -raw aks_cluster_name)
              echo CLUSTERNAME=$(terraform output -raw aks_cluster_name) >> /env/cluster.env
              echo RGNAME=$(terraform output -raw rg_name) >> /env/cluster.env
            fi

            cat /env/cluster.env

      - name: Login (commercial)
        if: matrix.cloud == 'AzurePublicCloud'
        uses: Azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Login (gov)
        if: matrix.cloud == 'AzureUSGovernmentCloud'
        uses: Azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}
          environment: 'AzureUSGovernment'

      - name: Verify RKE2 is Up
        if: matrix.flavor == 'rke2'
        run: |
          set -o allexport
          source env-tmp/cluster.env
          set +o allexport

          FILE=$(realpath k8s.kubeconfig)
          export KUBECONFIG=$FILE

          until az keyvault secret show --name kubeconfig --vault-name $KVNAME -o json | jq -r '.value' > $FILE
          do
            echo "Waiting for kubeconfig secret to appear..."
            sleep 5
          done

          until kubectl version &> /dev/null
          do
            echo "Waiting for k8s server to respond..."
            sleep 5
          done
          
          kubectl version

      - name: Verify AKS is Up
        if: matrix.flavor == 'aks'
        run: |
          set -o allexport
          source env-tmp/cluster.env
          set +o allexport

          wget -q https://github.com/Azure/kubelogin/releases/download/v0.0.14/kubelogin-linux-amd64.zip
          unzip kubelogin*.zip
          mv bin/linux_amd64/kubelogin /usr/local/bin/kubelogin

          echo $CLUSTERNAME
          echo $RGNAME

          az aks get-credentials --name $CLUSTERNAME --resource-group $RGNAME

          FILE=$(realpath k8s.kubeconfig)
          export KUBECONFIG=$FILE

          cp /home/runner/.kube/config $FILE
          ls -la $FILE

          kubelogin convert-kubeconfig -l spn

          until kubectl version &> /dev/null
          do
            echo "Waiting for k8s server to respond..."
            sleep 5
          done

          kubectl version


      - name: Upload cluster.env
        uses: actions/upload-artifact@v3
        with:
          name: cluster_env_${{ matrix.flavor }}_${{ matrix.cloud}}_${{ matrix.location}}_${{ matrix.vm_size}}_${{ matrix.cluster_size}}
          path: ${{ github.workspace }}/env-tmp/cluster.env

  deploy-bigbang:
    name: Deploy Big Bang
    runs-on: ubuntu-latest
    needs: [build-container, deploy-k8s]
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        flavor: [rke2,aks]
        cloud:  [AzureUSGovernmentCloud, AzurePublicCloud]
        location: [usgovvirginia, eastus2]
        vm_size: [Standard_D8_v3]
        cluster_size: [5]
        experimental: [true]
        include:
          - flavor: aks
            version: 1.22.6
        exclude:
          - cloud: AzureUSGovernmentCloud
            location: eastus
          - cloud: AzureUSGovernmentCloud
            location: eastus2
          - cloud: AzurePublicCloud
            location: usgovvirginia
          - cloud: AzurePublicCloud
            location: usgovarizona

    steps:
      - name: Hello
        run: echo

  verify-bigbang:
    name: Verify Big Bang
    runs-on: ubuntu-latest
    needs: [build-container, deploy-k8s, deploy-bigbang]
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        flavor: [rke2,aks]
        cloud:  [AzureUSGovernmentCloud, AzurePublicCloud]
        location: [usgovvirginia, eastus2]
        vm_size: [Standard_D8_v3]
        cluster_size: [5]
        experimental: [true]
        include:
          - flavor: aks
            version: 1.22.6
        exclude:
          - cloud: AzureUSGovernmentCloud
            location: eastus
          - cloud: AzureUSGovernmentCloud
            location: eastus2
          - cloud: AzurePublicCloud
            location: usgovvirginia
          - cloud: AzurePublicCloud
            location: usgovarizona

    steps:
      - name: Hello
        run: echo

  clean-up:
    name: Destroy all resourcs
    runs-on: ubuntu-22.04
    needs: [build-container, deploy-k8s, deploy-bigbang, verify-bigbang]
    if: ${{ always() }}

    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        flavor: [rke2,aks]
        cloud:  [AzureUSGovernmentCloud, AzurePublicCloud]
        location: [usgovvirginia, eastus2]
        vm_size: [Standard_D8_v3]
        cluster_size: [5]
        experimental: [true]
        include:
          - flavor: aks
            version: 1.22.6
        exclude:
          - cloud: AzureUSGovernmentCloud
            location: eastus
          - cloud: AzureUSGovernmentCloud
            location: eastus2
          - cloud: AzurePublicCloud
            location: usgovvirginia
          - cloud: AzurePublicCloud
            location: usgovarizona

    steps:
      - name: Hello
        run: echo
