name: DSOPBuilder Test

on: [workflow_dispatch, push]

jobs:
  
  build-container:
    name: Build the DSOPBuilder Container Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Buildx
        run: echo
      - name: Build and export container
        run: echo
      - name: Upload container
        run: echo

  deploy-k8s:
    name: Deploy Kubernetes
    runs-on: ubuntu-latest
    needs: build-container
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        flavor: [rke2,aks]
        cloud:  [AzureUSGovernmentCloud, AzurePublicCloud]
        location: [usgovvirginia, eastus2]
        vm_size: [Standard_D8_v3]
        cluster_size: [5]
        experimental: [true]
        include:
          - flavor: aks
            version: 1.22.6
        exclude:
          - cloud: AzureUSGovernmentCloud
            location: eastus
          - cloud: AzureUSGovernmentCloud
            location: eastus2
          - cloud: AzurePublicCloud
            location: usgovvirginia
          - cloud: AzurePublicCloud
            location: usgovarizona


    steps:
      - name: Setup Buildx
        run: echo
      - name: Download container
        run: echo 
      - name: Load container
        run: echo
      - name: Prep container env directory
        run: |
          mkdir -p env-tmp
          touch env-tmp/vars.env

      - name: Prep for (Commercial)
        if: matrix.cloud == 'AzurePublicCloud'
        run: |        
          echo Save AZURE_PUB_CREDENTIALS to an env variable
          echo "AZURE_CREDENTIALS="$(echo '${{ secrets.AZURE_PUB_CREDENTIALS }}') >> $GITHUB_ENV
      - name: Prep for (Government)
        if: matrix.cloud == 'AzureUSGovernmentCloud'
        run: |         
          echo Save AZURE_GOV_CREDENTIALS to an env variable and set ARM_ENVIRONMENT in vars.env
          echo "AZURE_CREDENTIALS="$(echo '${{ secrets.AZURE_GOV_CREDENTIALS }}') >> $GITHUB_ENV
          echo "ARM_ENVIRONMENT=usgovernment" >> env-tmp/vars.env
          
      - name: Setup container credentials        
        run: |
          echo set all credentials one time using that env variable
          echo "ARM_TENANT_ID="$(echo '${{ env.AZURE_CREDENTIALS }}' | jq .tenantId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_CLIENT_ID="$(echo '${{ env.AZURE_CREDENTIALS }}' | jq .clientId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_CLIENT_SECRET="$(echo '${{ env.AZURE_CREDENTIALS }}' | jq .clientSecret | tr -d '"') >> env-tmp/vars.env
          echo "ARM_SUBSCRIPTION_ID="$(echo '${{ env.AZURE_CREDENTIALS }}' | jq .subscriptionId | tr -d '"') >> env-tmp/vars.env

          echo "AAD_SERVICE_PRINCIPAL_CLIENT_ID="$(echo '${{ env.AZURE_CREDENTIALS }}' | jq .clientId | tr -d '"') >> env-tmp/vars.env
          echo "AAD_SERVICE_PRINCIPAL_CLIENT_SECRET="$(echo '${{ env.AZURE_CREDENTIALS }}' | jq .clientSecret | tr -d '"') >> env-tmp/vars.env

          echo "TIM_TEST=${{ env.TIM_TEST }}" >> env-tmp/vars.env

      - name: Setup cluster config
        run: |
          echo copy ci-config-{flavor}}.json to env-tmp/config.json, set all values, AND set the AAD_GROUP var if aks

          set -o allexport
          source env-tmp/vars.env
          set +o allexport

          env | grep TIM_TEST

      - name: Deploy Kubernetes
        run: |
          echo
      - name: Upload cluster.env
        run: |
          echo

  deploy-bigbang:
    name: Deploy Big Bang
    runs-on: ubuntu-latest
    needs: [build-container, deploy-k8s]
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        flavor: [rke2,aks]
        cloud:  [AzureUSGovernmentCloud, AzurePublicCloud]
        location: [usgovvirginia, eastus2]
        vm_size: [Standard_D8_v3]
        cluster_size: [5]
        experimental: [true]
        include:
          - flavor: aks
            version: 1.22.6
        exclude:
          - cloud: AzureUSGovernmentCloud
            location: eastus
          - cloud: AzureUSGovernmentCloud
            location: eastus2
          - cloud: AzurePublicCloud
            location: usgovvirginia
          - cloud: AzurePublicCloud
            location: usgovarizona

    steps:
      - name: Hello
        run: echo

  verify-bigbang:
    name: Verify Big Bang
    runs-on: ubuntu-latest
    needs: [build-container, deploy-k8s, deploy-bigbang]
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        flavor: [rke2,aks]
        cloud:  [AzureUSGovernmentCloud, AzurePublicCloud]
        location: [usgovvirginia, eastus2]
        vm_size: [Standard_D8_v3]
        cluster_size: [5]
        experimental: [true]
        include:
          - flavor: aks
            version: 1.22.6
        exclude:
          - cloud: AzureUSGovernmentCloud
            location: eastus
          - cloud: AzureUSGovernmentCloud
            location: eastus2
          - cloud: AzurePublicCloud
            location: usgovvirginia
          - cloud: AzurePublicCloud
            location: usgovarizona

    steps:
      - name: Hello
        run: echo

  clean-up:
    name: Destroy all resourcs
    runs-on: ubuntu-22.04
    needs: [build-container, deploy-k8s, deploy-bigbang, verify-bigbang]
    if: ${{ always() }}

    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        flavor: [rke2,aks]
        cloud:  [AzureUSGovernmentCloud, AzurePublicCloud]
        location: [usgovvirginia, eastus2]
        vm_size: [Standard_D8_v3]
        cluster_size: [5]
        experimental: [true]
        include:
          - flavor: aks
            version: 1.22.6
        exclude:
          - cloud: AzureUSGovernmentCloud
            location: eastus
          - cloud: AzureUSGovernmentCloud
            location: eastus2
          - cloud: AzurePublicCloud
            location: usgovvirginia
          - cloud: AzurePublicCloud
            location: usgovarizona

    steps:
      - name: Hello
        run: echo
