name: Test

on: [workflow_dispatch, push]

jobs:

  build-container:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - name: Build and export
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: dsopbuilder:ci
          push: false
          outputs: type=docker,dest=/tmp/dsopbuilder-ci.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: dsopbuilder
          path: /tmp/dsopbuilder-ci.tar
      
  deploy-k8s:
    runs-on: ubuntu-latest
    needs: build-container
    strategy:
      fail-fast: false
      matrix:
        flavor: ['rke2']
        cloud:  ['government', 'commercial']        
    outputs:
      kvname: ${{ steps.deploy_k8s.outputs.kvname }}
      clustername: ${{ steps.deploy_k8s.outputs.clustername }}
      rgname: ${{ steps.deploy_k8s.outputs.rgname }}

    steps:
      - uses: docker/setup-buildx-action@v2
      - uses: actions/download-artifact@v3
        with:
          name: dsopbuilder
          path: /tmp
      - run: docker load --input /tmp/dsopbuilder-ci.tar
      
      - name: Set up container env (Government)
        if: matrix.cloud == 'government'
        run: |
          mkdir -p env-tmp

          cat << EOF >  env-tmp/config-rke2.json
          ${{ secrets.RKE2_GOV_CONFIG }}
          EOF

          cat << EOF >  env-tmp/config-aks.json
          ${{ secrets.AKS_GOV_CONFIG }}
          EOF

          echo "ARM_TENANT_ID="$(echo '${{ secrets.AZURE_GOV_CREDENTIALS }}' | jq .tenantId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_CLIENT_ID="$(echo '${{ secrets.AZURE_GOV_CREDENTIALS }}' | jq .clientId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_CLIENT_SECRET="$(echo '${{ secrets.AZURE_GOV_CREDENTIALS }}' | jq .clientSecret | tr -d '"') >> env-tmp/vars.env
          echo "ARM_SUBSCRIPTION_ID="$(echo '${{ secrets.AZURE_GOV_CREDENTIALS }}' | jq .subscriptionId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_ENVIRONMENT=usgovernment" >> env-tmp/vars.env

          echo "AAD_SERVICE_PRINCIPAL_CLIENT_ID="$(echo '${{ secrets.AZURE_GOV_CREDENTIALS }}' | jq .clientId | tr -d '"') >> env-tmp/vars.env
          echo "AAD_SERVICE_PRINCIPAL_CLIENT_SECRET="$(echo '${{ secrets.AZURE_GOV_CREDENTIALS }}' | jq .clientSecret | tr -d '"') >> env-tmp/vars.env

          echo "TIM_TEST=tim_test" >> env-tmp/vars.env
          echo "TIM_TEST_2=tim_test" >> env-tmp/vars.env

          ls -la env-tmp

      - name: Set up container env (Commercial)
        if: matrix.cloud == 'commercial'
        run: |
          mkdir -p env-tmp

          cat << EOF >  env-tmp/config-rke2.json
          ${{ secrets.RKE2_PUB_CONFIG }}
          EOF

          cat << EOF >  env-tmp/config-aks.json
          ${{ secrets.AKS_PUB_CONFIG }}
          EOF

          echo "ARM_TENANT_ID="$(echo '${{ secrets.AZURE_PUB_CREDENTIALS }}' | jq .tenantId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_CLIENT_ID="$(echo '${{ secrets.AZURE_PUB_CREDENTIALS }}' | jq .clientId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_CLIENT_SECRET="$(echo '${{ secrets.AZURE_PUB_CREDENTIALS }}' | jq .clientSecret | tr -d '"') >> env-tmp/vars.env
          echo "ARM_SUBSCRIPTION_ID="$(echo '${{ secrets.AZURE_PUB_CREDENTIALS }}' | jq .subscriptionId | tr -d '"') >> env-tmp/vars.env
          #echo "ARM_ENVIRONMENT=azurecloud" >> env-tmp/vars.env

          echo "AAD_SERVICE_PRINCIPAL_CLIENT_ID="$(echo '${{ secrets.AZURE_PUB_CREDENTIALS }}' | jq .clientId | tr -d '"') >> env-tmp/vars.env
          echo "AAD_SERVICE_PRINCIPAL_CLIENT_SECRET="$(echo '${{ secrets.AZURE_PUB_CREDENTIALS }}' | jq .clientSecret | tr -d '"') >> env-tmp/vars.env

          echo "TIM_TEST=tim_test" >> env-tmp/vars.env
          echo "TIM_TEST_2=tim_test" >> env-tmp/vars.env

          ls -la env-tmp

      - name: Deploy Kubernetes
        uses: kohlerdominik/docker-run-action@v1
        id: deploy_k8s
        with:
          image: dsopbuilder:ci
          shell: /bin/bash
          volumes: |
            ${{ github.workspace }}/env-tmp:/env
          run: |
            set -o allexport
            source /env/vars.env
            set +o allexport

            mv /env/config-rke2.json config/config-rke2.json
            mv /env/config-aks.json  config/config-aks.json

            # Install AMD64 terraform to make GH Action Runner happy
            wget -q https://releases.hashicorp.com/terraform/1.1.7/terraform_1.1.7_linux_amd64.zip
            unzip terraform*.zip
            mv terraform /usr/local/bin

            if [ ${{ matrix.cloud }} = "government" ]; then
              az cloud set --name AzureUSGovernment
            fi

            az login --service-principal -u "${ARM_CLIENT_ID}" -p "${ARM_CLIENT_SECRET}" --tenant "${ARM_TENANT_ID}"

            echo "Deploying ${{ matrix.flavor }} ..."

            python3 main.py ${{ matrix.flavor }} apply --project ${{ github.run_number }} < <(yes)

            cd /PyBuilder/working/dsop_${{ matrix.flavor }}/${{ github.run_number }}
            source ../scripts/fetch-kubeconfig.sh

            until kubectl version &> /dev/null
            do
              echo "Waiting for k8s server to respond..."
              sleep 10
              source ../scripts/fetch-kubeconfig.sh
              ls -lah *.kubeconfig
            done

            kubectl version

            #echo "::set-output name=kvname::"$(terraform output -raw kv_name)
            #echo "::set-output name=clustername::"$(terraform output -json rke2_cluster | jq .name | tr -d '"')
            #echo "::set-output name=rgname::"$(terraform output -raw rg_name)

            echo KVNAME=$(terraform output -raw kv_name) >> /env/cluster.env
            echo CLUSTERNAME=$(terraform output -json rke2_cluster | jq .name | tr -d '"') >> /env/cluster.env
            echo RGNAME=$(terraform output -raw rg_name) >> /env/cluster.env

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: cluster_env_${{ matrix.flavor }}_${{ matrix.cloud}}
          path: ${{ github.workspace }}/env-tmp/cluster.env
            
  deploy-bigbang:
    runs-on: ubuntu-latest
    needs: deploy-k8s
    strategy:
      fail-fast: false
      matrix:
        cloud:  ['government', 'commercial']
        flavor: ['rke2']

    steps:
      - uses: docker/setup-buildx-action@v2
      - uses: actions/download-artifact@v3
        with:
          name: dsopbuilder
          path: /tmp

      - run: docker load --input /tmp/dsopbuilder-ci.tar
      
      - uses: actions/download-artifact@v3
        with:
          name: cluster_env_${{ matrix.flavor }}_${{ matrix.cloud}}
          path: env-tmp

      - name: Set up Big Bang config
        run: |
          mkdir -p env-tmp

          cat << EOF >  env-tmp/config-bigbang.json
          ${{ secrets.BB_CONFIG }}
          EOF
          sed -i env-tmp/config-bigbang.json -e "s/__GH_BRANCH__/ci-bb-${{ matrix.flavor }}-${{ matrix.cloud }}-${{ github.run_number }}/g"                

      - name: Set up container env (Government)
        if: matrix.cloud == 'government'
        run: |
          echo "ARM_TENANT_ID="$(echo '${{ secrets.AZURE_GOV_CREDENTIALS }}' | jq .tenantId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_CLIENT_ID="$(echo '${{ secrets.AZURE_GOV_CREDENTIALS }}' | jq .clientId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_CLIENT_SECRET="$(echo '${{ secrets.AZURE_GOV_CREDENTIALS }}' | jq .clientSecret | tr -d '"') >> env-tmp/vars.env
          echo "ARM_SUBSCRIPTION_ID="$(echo '${{ secrets.AZURE_GOV_CREDENTIALS }}' | jq .subscriptionId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_ENVIRONMENT=usgovernment" >> env-tmp/vars.env

          echo "AAD_SERVICE_PRINCIPAL_CLIENT_ID="$(echo '${{ secrets.AZURE_GOV_CREDENTIALS }}' | jq .clientId | tr -d '"') >> env-tmp/vars.env
          echo "AAD_SERVICE_PRINCIPAL_CLIENT_SECRET="$(echo '${{ secrets.AZURE_GOV_CREDENTIALS }}' | jq .clientSecret | tr -d '"') >> env-tmp/vars.env
        
      - name: Set up container env (Commercial)
        if: matrix.cloud == 'commercial'
        run: |
          echo "ARM_TENANT_ID="$(echo '${{ secrets.AZURE_PUB_CREDENTIALS }}' | jq .tenantId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_CLIENT_ID="$(echo '${{ secrets.AZURE_PUB_CREDENTIALS }}' | jq .clientId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_CLIENT_SECRET="$(echo '${{ secrets.AZURE_PUB_CREDENTIALS }}' | jq .clientSecret | tr -d '"') >> env-tmp/vars.env
          echo "ARM_SUBSCRIPTION_ID="$(echo '${{ secrets.AZURE_PUB_CREDENTIALS }}' | jq .subscriptionId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_ENVIRONMENT=azurecloud" >> env-tmp/vars.env

          echo "AAD_SERVICE_PRINCIPAL_CLIENT_ID="$(echo '${{ secrets.AZURE_PUB_CREDENTIALS }}' | jq .clientId | tr -d '"') >> env-tmp/vars.env
          echo "AAD_SERVICE_PRINCIPAL_CLIENT_SECRET="$(echo '${{ secrets.AZURE_PUB_CREDENTIALS }}' | jq .clientSecret | tr -d '"') >> env-tmp/vars.env


      - name: Deploy Big Bang
        uses: kohlerdominik/docker-run-action@v1
        id: deploy_bigbang
        with:
          image: dsopbuilder:ci
          shell: /bin/bash
          volumes: |
            ${{ github.workspace }}/env-tmp:/env
          run: |
            set -o allexport
            source /env/vars.env
            source /env/cluster.env
            set +o allexport

            mv /env/config-bigbang.json config/config-bigbang.json

            if [ ${{ matrix.cloud }} = "government" ]; then
              az cloud set --name AzureUSGovernment
            fi

            az login --service-principal -u "${ARM_CLIENT_ID}" -p "${ARM_CLIENT_SECRET}" --tenant "${ARM_TENANT_ID}"

            echo "Deploying ${{ matrix.flavor }} ..."

            echo $KVNAME
            echo $CLUSTERNAME
            echo $RGNAME
            echo "wahoo!"

            FILE=$(realpath k8s.kubeconfig)
            export KUBECONFIG=$FILE

            if [ ${{ matrix.flavor }} = "rke2" ]; then
              az keyvault secret show --name kubeconfig --vault-name $KVNAME -o json | jq -r '.value' > $FILE
            else
              # If AKS, need kubelogin for interactive

              wget -q https://github.com/Azure/kubelogin/releases/download/v0.0.14/kubelogin-linux-amd64.zip
              unzip kubelogin*.zip
              mv bin/linux_amd64/kubelogin /usr/local/bin/kubelogin

              az aks get-credentials -g $RGNAME -n $CLUSTERNAME
              cp /root/.kube/config $FILE
              ls -la FILE

              kubelogin convert-kubeconfig -l spn
            fi

            until kubectl version &> /dev/null
            do
              echo "Waiting for k8s server to respond..."
              sleep 5
            done
            
            kubectl version
            python3 main.py bb deploy


  verify-bigbang:
    runs-on: ubuntu-latest
    needs: [deploy-k8s, deploy-bigbang]
    strategy:
      fail-fast: false
      matrix:
        cloud:  ['government', 'commercial']
        flavor: ['rke2']

    steps:
      - uses: docker/setup-buildx-action@v2
      - uses: actions/download-artifact@v3
        with:
          name: dsopbuilder
          path: /tmp

      - run: docker load --input /tmp/dsopbuilder-ci.tar
      
      - uses: actions/download-artifact@v3
        with:
          name: cluster_env_${{ matrix.flavor }}_${{ matrix.cloud}}
          path: env-tmp

      - name: Set up Big Bang config
        run: |
          mkdir -p env-tmp

          cat << EOF >  env-tmp/config-bigbang.json
          ${{ secrets.BB_CONFIG }}
          EOF
          sed -i env-tmp/config-bigbang.json -e "s/__GH_BRANCH__/ci-bb-${{ matrix.flavor }}-${{ matrix.cloud }}-${{ github.run_number }}/g"                

      - name: Set up container env (Government)
        if: matrix.cloud == 'government'
        run: |
          echo "ARM_TENANT_ID="$(echo '${{ secrets.AZURE_GOV_CREDENTIALS }}' | jq .tenantId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_CLIENT_ID="$(echo '${{ secrets.AZURE_GOV_CREDENTIALS }}' | jq .clientId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_CLIENT_SECRET="$(echo '${{ secrets.AZURE_GOV_CREDENTIALS }}' | jq .clientSecret | tr -d '"') >> env-tmp/vars.env
          echo "ARM_SUBSCRIPTION_ID="$(echo '${{ secrets.AZURE_GOV_CREDENTIALS }}' | jq .subscriptionId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_ENVIRONMENT=usgovernment" >> env-tmp/vars.env

          echo "AAD_SERVICE_PRINCIPAL_CLIENT_ID="$(echo '${{ secrets.AZURE_GOV_CREDENTIALS }}' | jq .clientId | tr -d '"') >> env-tmp/vars.env
          echo "AAD_SERVICE_PRINCIPAL_CLIENT_SECRET="$(echo '${{ secrets.AZURE_GOV_CREDENTIALS }}' | jq .clientSecret | tr -d '"') >> env-tmp/vars.env
        
      - name: Set up container env (Commercial)
        if: matrix.cloud == 'commercial'
        run: |
          echo "ARM_TENANT_ID="$(echo '${{ secrets.AZURE_PUB_CREDENTIALS }}' | jq .tenantId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_CLIENT_ID="$(echo '${{ secrets.AZURE_PUB_CREDENTIALS }}' | jq .clientId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_CLIENT_SECRET="$(echo '${{ secrets.AZURE_PUB_CREDENTIALS }}' | jq .clientSecret | tr -d '"') >> env-tmp/vars.env
          echo "ARM_SUBSCRIPTION_ID="$(echo '${{ secrets.AZURE_PUB_CREDENTIALS }}' | jq .subscriptionId | tr -d '"') >> env-tmp/vars.env
          echo "ARM_ENVIRONMENT=azurecloud" >> env-tmp/vars.env

          echo "AAD_SERVICE_PRINCIPAL_CLIENT_ID="$(echo '${{ secrets.AZURE_PUB_CREDENTIALS }}' | jq .clientId | tr -d '"') >> env-tmp/vars.env
          echo "AAD_SERVICE_PRINCIPAL_CLIENT_SECRET="$(echo '${{ secrets.AZURE_PUB_CREDENTIALS }}' | jq .clientSecret | tr -d '"') >> env-tmp/vars.env


      - name: Verify Big Bang
        uses: kohlerdominik/docker-run-action@v1
        id: deploy_bigbang
        with:
          image: dsopbuilder:ci
          shell: /bin/bash
          volumes: |
            ${{ github.workspace }}/env-tmp:/env
          run: |
            set -o allexport
            source /env/vars.env
            source /env/cluster.env
            set +o allexport

            mv /env/config-bigbang.json config/config-bigbang.json

            if [ ${{ matrix.cloud }} = "government" ]; then
              az cloud set --name AzureUSGovernment
            fi

            az login --service-principal -u "${ARM_CLIENT_ID}" -p "${ARM_CLIENT_SECRET}" --tenant "${ARM_TENANT_ID}"

            echo "Deploying ${{ matrix.flavor }} ..."

            echo $KVNAME
            echo $CLUSTERNAME
            echo $RGNAME
            echo "wahoo!"

            FILE=$(realpath k8s.kubeconfig)
            export KUBECONFIG=$FILE

            if [ ${{ matrix.flavor }} = "rke2" ]; then
              az keyvault secret show --name kubeconfig --vault-name $KVNAME -o json | jq -r '.value' > $FILE
            else
              # If AKS, need kubelogin for interactive

              wget -q https://github.com/Azure/kubelogin/releases/download/v0.0.14/kubelogin-linux-amd64.zip
              unzip kubelogin*.zip
              mv bin/linux_amd64/kubelogin /usr/local/bin/kubelogin

              az aks get-credentials -g $RGNAME -n $CLUSTERNAME
              cp /root/.kube/config $FILE
              ls -la FILE

              kubelogin convert-kubeconfig -l spn
            fi

            until kubectl version &> /dev/null
            do
              echo "Waiting for k8s server to respond..."
              sleep 5
            done
            
            kubectl version

            cd tests && chmod +x verify-bigbang.sh && ./verify-bigbang.sh

            #for n in {1..30}
            #do
              # (python3 main.py bb verify | grep 'False\|Unknown' &> /dev/null && :)
              # if [[ $? -eq 1 ]]; then break; fi
              #echo "Waiting for Big Bang to reconcile ... (minute $n of 30)"
            #  sleep 60
            #done

            #if python3 main.py bb verify | grep 'False\|Unknown'; then exit 1; fi  
            # python3 main.py bb verify
            #kubectl get ks,hr -A
            

  clean-up:
    runs-on: ubuntu-22.04
    needs: [deploy-k8s, deploy-bigbang, verify-bigbang]
    if: ${{ always() }}
    strategy:
      fail-fast: false
      matrix:
        cloud:  ['gov', 'commercial']
        flavor: ['rke2']
    steps:
      - name: Login to Azure Gov
        uses: Azure/login@v1
        if: matrix.cloud == 'gov'
        with:
          creds: ${{ secrets.AZURE_GOV_CREDENTIALS }}
          environment: azureusgovernment
      
      - name: Login to Azure Commercial
        uses: Azure/login@v1
        if: matrix.cloud == 'commercial'
        with:
          creds: ${{ secrets.AZURE_PUB_CREDENTIALS }}
      
      - name: Clean-up
        run: |
          az group delete --name dsop-${{ matrix.flavor }}-ci-rg --yes
          az group list -o table
